============== BOX SHADOW PROPERTY ==============
https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow

box-shadow: x-offset y-offset blur spread color inset;

blur - If three values are specified, the third value is interpreted as <blur-radius>. The larger this value, the bigger the blur, so the shadow becomes bigger and lighter. Negative values are not allowed.

spread - If four values are specified, the fourth value is interpreted as <spread-radius>. This value adds shadow to the entire element. Positive values will cause the shadow to expand and grow bigger, negative values will cause the shadow to shrink.

===================== RGBA() =====================
rgba(red, green, blue, alpha)
rgba(color/variable, alpha)
alpha - opacity


=================== OUTLINE ===================
https://developer.mozilla.org/en-US/docs/Web/CSS/outline-style
/* color | style | width */
outline: color style width;
/// outline: green solid 3px; ///

Outline styles
outline-style: auto;
outline-style: none;
outline-style: dotted;
outline-style: dashed;
outline-style: solid;
outline-style: double;
outline-style: groove;
outline-style: ridge;
outline-style: inset;
outline-style: outset;

================ OUTLINE  OFFSET ================
The outline-offset CSS property sets the amount of space between an outline and the edge or border of an element.

SYNTAX: outline-offset: <length> values
<length> - The width of the space between the element and its outline. A negative value places the outline inside the element.

Examples:
outline-offset: 3px;
outline-offset: 0.2em;


============== ANIMATION PROPERTY ==============
animation: name duration timing-function delay iteration-count direction fill-mode play-state;

- name: Specifies the name of the @keyframes rule that defines the animation.
- duration: Specifies how long the animation will take to complete (e.g., 1s, 500ms).
- timing-function: Defines the speed curve or pacing of the animation (e.g., ease, linear, ease-in-out, cubic-bezier()).
- delay: Specifies a delay before the animation starts (e.g., 0s, 1s).
- iteration-count: Defines the number of times the animation will run (infinite or a numeric value).
- direction: Specifies whether the animation plays forward, backward, or alternates (e.g., normal, reverse, alternate).
- fill-mode: Controls the styles applied to the element before and after the animation (e.g., forwards, backwards, both).
- play-state: Specifies whether the animation is running or paused (e.g., running, paused).

animation fill mode set to backwards applies the 0% animation declaration to our button before the animation happens. Therefore, we don't have to explicitly apply these styles to the button which prevents confusion. */



============= TRANSITION: ALL PROPERTY =============
Syntax: transition: all <duration> <timing-function> <delay>; 

default values:
transition-delay: 0s
transition-duration: 0s
transition-property: all
transition-timing-function: ease
transition-behavior: normal

How it works?
Applies Transition to all properties: It sets a transition effect for all properties that can be transitioned (e.g., width, height, color, background, etc.) within the specified element.

Uniform Transition for All Changes: When any of these properties change (due to a CSS change, hover effect, class change, etc.), the transition effect defined by transition: all will be applied uniformly to those changes. */

=============== CLIP-PATH POLYGON =================
syntax: clip-path:polygon(x y(first point), x y (2nd point), x y (3rd point), x y (4th point))


=============== SHAPE-OUTSIDE ======================
shape-outside: value()

The CSS shape-outside property controls how text wraps around any floated image. The text that is wrapped can take the shape of a circle, ellipse, rectangle or polygon.

The shape-outside property takes a “basic shape” and applies a shape function to it. The shape function is used to change the shape of the float area of the shape.

It’s important to note that this property will only work on floated elements for now.
You must set the height and width of the element. This will be used by the shape function to create a coordinate system that is used when wrapping text around the image.

***** VALUES *****
circle(r at cx cy): for making circular shapes, where r is the radius of the circle and cx and cy are the coordinates for the center of the circle. If you omit them, the center of the image will be used as the default values.

ellipse(): for making elliptical shapes.
inset(): for making rectangular shapes.
polygon(): for creating any shape with 3 or more vertices.
url(): identifies which image should be used to wrap text around.
initial: the float area is unaffected.
inherit: inherits shape-outside value from parent.


================ BLUR EFFECT ==============
Syntax
filter: blur(value);

Accepted values:
1. Length Values: You can specify the blur radius using length values like pixels (px), ems (em), or rems (rem). For example:
 - blur(5px): Applies a blur radius of 5 pixels.
 - blur(2em): Applies a blur radius of 2 ems.
 - blur(0.5rem): Applies a blur radius of 0.5 rems.

2. Percentage Values: You can also specify the blur radius using percentage values relative to the size of the element. For example:
 - blur(50%): Applies a blur radius equal to 50% of the width/height of the element.


============= LINEAR GRADIENT =============
linear-gradient(45deg, red 0 50%, blue 50% 100%)

Here's what each part of the declaration means:

  1. 45deg: Specifies the direction of the gradient as a 45-degree angle. The gradient will be slanted at a 45-degree angle from its starting point.
  
  2. red 0 50%: This part defines the color stops for the red portion of the gradient. It means:
    
   - red: Specifies the color red.
   
   - 0: Represents the starting point of the gradient. In this case, it starts at the very beginning (leftmost edge) of the gradient.
    
   - 50%: Represents the ending point of the red portion of the gradient. It ends at 50% of the length of the gradient (horizontally).

  3. blue 50% 100%: This part defines the color stops for the blue portion of the gradient. It means:
    
   - blue: Specifies the color blue.

   - 50%: Represents the starting point of the blue portion of the gradient. It starts at 50% of the length of the gradient (horizontally).

   - 100%: Represents the ending point of the blue portion of the gradient. It ends at the very end (rightmost edge) of the gradient.


============= SKEW ==============
transform: skewX(<angle>);

transform: skewX(30deg); will skew the element by 30 degrees along the horizontal axis, making it slant towards the right.

transform: skewX(-20deg); will skew the element by -20 degrees along the horizontal axis, making it slant towards the left.

******** UNITS

- Degrees (deg): The most common unit used for angles in CSS. You can specify the angle in degrees from 0 to 360.
Example: skewX(45deg)

- Radians (rad): An alternative unit for angles, where 1 radian is approximately equal to 57.3 degrees.
Example: skewX(0.7854rad) (approximately equivalent to 45 degrees)

- Gradians (grad): Another alternative unit for angles, where 1 gradian is equal to 1/400 of a full circle.
Example: skewX(50grad)

- Turns (turn): Specifies the number of full circles the element should be rotated.
Example: skewX(0.125turn) (equivalent to 45 degrees)

