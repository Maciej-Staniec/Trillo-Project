************** PSEUDO ELEMENTS **************
Pseudo-elements in CSS allow you to style specific parts of an HTML element without adding extra HTML markup code. They target certain parts of an element's content or structure, enabling you to apply styles to those parts. Pseudo-elements are powerful tools to enhance the presentation and styling of specific parts of an element's content or structure without modifying the HTML structure itself.

By default, pseudo-elements are empty and have no content. Adding content allows you to define what appears in these pseudo-elements. If the content property is not used, the pseudo-element won't generate any content and may not be visible. Content property must be declared, even if it is empty.

content: "";

Common Pseudo-elements:
::before: Adds content before the selected element's content.
::after: Adds content after the selected element's content.
::first-line: Styles the first line of text within an element.
::first-letter: Styles the first letter of text within an element.
::selection: Styles the portion of text selected by the user.

Pseudo-elements use double colons (::) in modern CSS to distinguish them from pseudo-classes (e.g., :hover, :focus). However, for compatibility reasons, single colons (:) are still supported in some older browsers.



************** PSEUDO CLASSES **************
We use pseudoclasses to style elements under certain conditions.
- :link pseudo-class in CSS targets links (anchor elements <a>) that have not been visited or clicked by the user. It defines the style of unvisited links on a webpage.
- :visited pseudo class targets links that have already been visited or clicked by the user.
- :hover: Applies styles when the mouse pointer is hovering over the link element.
- :active: Applies styles when the link is being activated (usually when it's being clicked).



************** TIMING FUNCTIONS **************
A timing function in CSS is used to define the pace or speed curve of a transition or animation between two states of an element. It determines how the intermediate values of a transition are calculated over time, affecting the acceleration and deceleration of the animation.

Common Timing Functions:
1. Ease (default):
ease: Starts slow, accelerates, then slows down toward the end of the transition. It's commonly used and provides a smooth and natural transition.
2. Linear:
linear: Progresses at a constant speed throughout the transition, without acceleration or deceleration. The change occurs at a constant rate.
3. Ease-in, Ease-out Variations:
  - ease-in: Starts the transition slowly and accelerates as it progresses.
  - ease-out: Begins the transition at full speed and decelerates as it finishes.
  - ease-in-out: Combines ease-in and ease-out, starting and ending the transition slowly with an acceleration in the middle.



************** DISPLAY PROPERTY **************
Using display: inline-block; for the buttons allows them to sit next to each other horizontally in the same line while applying margin between them to create spacing. It also accepts block-level properties such as setting width, height, padding, and margins.

=========== APPEARANCE:NONE VS DISPLAY:NONE =============
appearance: none; and display: none; are both CSS properties, but they serve different purposes and have different effects on elements:

appearance: none;:

- This property is used to remove the default styling (or appearance) of certain form elements, such as buttons, checkboxes, and radio buttons.
- When you apply appearance: none;, it removes the default platform-specific styling of the element, allowing you to style it yourself using CSS.
- This property is particularly useful for creating custom-styled form controls that look consistent across different browsers and operating systems.
- Note that appearance: none; only affects the appearance of the element, not its visibility or layout.

display: none;:

- This property is used to completely remove an element from the rendering of the page.
- When you apply display: none; to an element, it hides the element from view and removes it from the document flow, meaning it doesn't take up any space in the layout.
- Elements with display: none; are not rendered on the page and are not accessible to users.
- This property is commonly used to hide elements dynamically using JavaScript or to create hidden sections of a webpage.

=========== visibility ==============

No, using visibility: hidden; alongside opacity: 0; will not break the animation. In fact, using visibility: hidden; is essential for ensuring that the hidden elements are completely removed from the layout, which helps prevent them from being clickable or interactive during the animation.

When you set visibility: hidden;, the element becomes invisible and non-clickable, but it still occupies space in the layout